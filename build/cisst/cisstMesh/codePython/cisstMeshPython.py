# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cisstMeshPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cisstMeshPython')
    _cisstMeshPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cisstMeshPython', [dirname(__file__)])
        except ImportError:
            import _cisstMeshPython
            return _cisstMeshPython
        try:
            _mod = imp.load_module('_cisstMeshPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cisstMeshPython = swig_import_helper()
    del swig_import_helper
else:
    import _cisstMeshPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMeshPython.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cisstMeshPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstMeshPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstMeshPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstMeshPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstMeshPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstMeshPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstMeshPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstMeshPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstMeshPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstMeshPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstMeshPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstMeshPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstMeshPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstMeshPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstMeshPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstMeshPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cisstMeshPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstMeshPython.ios_base_erase_event
    imbue_event = _cisstMeshPython.ios_base_imbue_event
    copyfmt_event = _cisstMeshPython.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _cisstMeshPython.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _cisstMeshPython.ios_base_flags(self, *args)

    def setf(self, *args):
        return _cisstMeshPython.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _cisstMeshPython.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _cisstMeshPython.ios_base_precision(self, *args)

    def width(self, *args):
        return _cisstMeshPython.ios_base_width(self, *args)
    sync_with_stdio = staticmethod(_cisstMeshPython.ios_base_sync_with_stdio)

    def imbue(self, __loc):
        return _cisstMeshPython.ios_base_imbue(self, __loc)

    def getloc(self):
        return _cisstMeshPython.ios_base_getloc(self)
    xalloc = staticmethod(_cisstMeshPython.ios_base_xalloc)

    def iword(self, __ix):
        return _cisstMeshPython.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _cisstMeshPython.ios_base_pword(self, __ix)
    __swig_destroy__ = _cisstMeshPython.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _cisstMeshPython.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _cisstMeshPython.cvar
ios_base.boolalpha = _cisstMeshPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstMeshPython.cvar.ios_base_dec
ios_base.fixed = _cisstMeshPython.cvar.ios_base_fixed
ios_base.hex = _cisstMeshPython.cvar.ios_base_hex
ios_base.internal = _cisstMeshPython.cvar.ios_base_internal
ios_base.left = _cisstMeshPython.cvar.ios_base_left
ios_base.oct = _cisstMeshPython.cvar.ios_base_oct
ios_base.right = _cisstMeshPython.cvar.ios_base_right
ios_base.scientific = _cisstMeshPython.cvar.ios_base_scientific
ios_base.showbase = _cisstMeshPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstMeshPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstMeshPython.cvar.ios_base_showpos
ios_base.skipws = _cisstMeshPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstMeshPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstMeshPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstMeshPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstMeshPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstMeshPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstMeshPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstMeshPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstMeshPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstMeshPython.cvar.ios_base_goodbit
ios_base.app = _cisstMeshPython.cvar.ios_base_app
ios_base.ate = _cisstMeshPython.cvar.ios_base_ate
ios_base.binary = _cisstMeshPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstMeshPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstMeshPython.cvar.ios_base_out
ios_base.trunc = _cisstMeshPython.cvar.ios_base_trunc
ios_base.beg = _cisstMeshPython.cvar.ios_base_beg
ios_base.cur = _cisstMeshPython.cvar.ios_base_cur
ios_base.end = _cisstMeshPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _cisstMeshPython.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _cisstMeshPython.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _cisstMeshPython.ios_base_xalloc()
ios_base_xalloc = _cisstMeshPython.ios_base_xalloc

class ios(ios_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def rdstate(self):
        return _cisstMeshPython.ios_rdstate(self)

    def clear(self, *args):
        return _cisstMeshPython.ios_clear(self, *args)

    def setstate(self, __state):
        return _cisstMeshPython.ios_setstate(self, __state)

    def good(self):
        return _cisstMeshPython.ios_good(self)

    def eof(self):
        return _cisstMeshPython.ios_eof(self)

    def fail(self):
        return _cisstMeshPython.ios_fail(self)

    def bad(self):
        return _cisstMeshPython.ios_bad(self)

    def exceptions(self, *args):
        return _cisstMeshPython.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _cisstMeshPython.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstMeshPython.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _cisstMeshPython.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _cisstMeshPython.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _cisstMeshPython.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _cisstMeshPython.ios_fill(self, *args)

    def imbue(self, __loc):
        return _cisstMeshPython.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _cisstMeshPython.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _cisstMeshPython.ios_widen(self, __c)
ios_swigregister = _cisstMeshPython.ios_swigregister
ios_swigregister(ios)

class streambuf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMeshPython.delete_streambuf
    __del__ = lambda self: None

    def pubimbue(self, __loc):
        return _cisstMeshPython.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _cisstMeshPython.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _cisstMeshPython.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _cisstMeshPython.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _cisstMeshPython.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _cisstMeshPython.streambuf_pubsync(self)

    def in_avail(self):
        return _cisstMeshPython.streambuf_in_avail(self)

    def snextc(self):
        return _cisstMeshPython.streambuf_snextc(self)

    def sbumpc(self):
        return _cisstMeshPython.streambuf_sbumpc(self)

    def sgetc(self):
        return _cisstMeshPython.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _cisstMeshPython.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _cisstMeshPython.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _cisstMeshPython.streambuf_sungetc(self)

    def sputc(self, __c):
        return _cisstMeshPython.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _cisstMeshPython.streambuf_sputn(self, __s, __n)
streambuf_swigregister = _cisstMeshPython.streambuf_swigregister
streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _cisstMeshPython.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstMeshPython.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args):
        return _cisstMeshPython.ostream___lshift__(self, *args)

    def put(self, __c):
        return _cisstMeshPython.ostream_put(self, __c)

    def write(self, __s, __n):
        return _cisstMeshPython.ostream_write(self, __s, __n)

    def flush(self):
        return _cisstMeshPython.ostream_flush(self)

    def tellp(self):
        return _cisstMeshPython.ostream_tellp(self)

    def seekp(self, *args):
        return _cisstMeshPython.ostream_seekp(self, *args)
ostream_swigregister = _cisstMeshPython.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _cisstMeshPython.new_istream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstMeshPython.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args):
        return _cisstMeshPython.istream___rshift__(self, *args)

    def gcount(self):
        return _cisstMeshPython.istream_gcount(self)

    def get(self, *args):
        return _cisstMeshPython.istream_get(self, *args)

    def getline(self, *args):
        return _cisstMeshPython.istream_getline(self, *args)

    def ignore(self, *args):
        return _cisstMeshPython.istream_ignore(self, *args)

    def peek(self):
        return _cisstMeshPython.istream_peek(self)

    def read(self, __s, __n):
        return _cisstMeshPython.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _cisstMeshPython.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _cisstMeshPython.istream_putback(self, __c)

    def unget(self):
        return _cisstMeshPython.istream_unget(self)

    def sync(self):
        return _cisstMeshPython.istream_sync(self)

    def tellg(self):
        return _cisstMeshPython.istream_tellg(self)

    def seekg(self, *args):
        return _cisstMeshPython.istream_seekg(self, *args)
istream_swigregister = _cisstMeshPython.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _cisstMeshPython.new_iostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstMeshPython.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _cisstMeshPython.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _cisstMeshPython.endl_cb_ptr

def endl(arg1):
    return _cisstMeshPython.endl(arg1)
endl = _cisstMeshPython.endl
ends_cb_ptr = _cisstMeshPython.ends_cb_ptr

def ends(arg1):
    return _cisstMeshPython.ends(arg1)
ends = _cisstMeshPython.ends
flush_cb_ptr = _cisstMeshPython.flush_cb_ptr

def flush(arg1):
    return _cisstMeshPython.flush(arg1)
flush = _cisstMeshPython.flush
import cisstCommonPython


