# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cisstVectorPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cisstVectorPython')
    _cisstVectorPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cisstVectorPython', [dirname(__file__)])
        except ImportError:
            import _cisstVectorPython
            return _cisstVectorPython
        try:
            _mod = imp.load_module('_cisstVectorPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cisstVectorPython = swig_import_helper()
    del swig_import_helper
else:
    import _cisstVectorPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstVectorPython.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cisstVectorPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstVectorPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstVectorPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstVectorPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstVectorPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstVectorPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstVectorPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstVectorPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstVectorPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstVectorPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstVectorPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstVectorPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstVectorPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstVectorPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstVectorPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstVectorPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cisstVectorPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import cisstCommonPython
class vctFrm3(object):
    """Proxy of C++ vctFrameBase<(vctRot3)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIMENSION = _cisstVectorPython.vctFrm3_DIMENSION

    def __init__(self):
        """__init__(vctFrameBase<(vctRot3)> self) -> vctFrm3"""
        this = _cisstVectorPython.new_vctFrm3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Identity():
        """Identity() -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_Identity()

    Identity = staticmethod(Identity)

    def Assign(self, otherFrame):
        """Assign(vctFrm3 self, vctFrm3 otherFrame) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_Assign(self, otherFrame)


    def Translation(self, *args):
        """
        Translation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::TranslationType const
        Translation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::TranslationType &
        """
        return _cisstVectorPython.vctFrm3_Translation(self, *args)


    def Rotation(self, *args):
        """
        Rotation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::RotationType const
        Rotation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::RotationType &
        """
        return _cisstVectorPython.vctFrm3_Rotation(self, *args)


    def IsNormalized(self, *args):
        """
        IsNormalized(vctFrm3 self, vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type tolerance) -> bool
        IsNormalized(vctFrm3 self) -> bool
        """
        return _cisstVectorPython.vctFrm3_IsNormalized(self, *args)


    def NormalizedSelf(self):
        """NormalizedSelf(vctFrm3 self) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_NormalizedSelf(self)


    def InverseSelf(self):
        """InverseSelf(vctFrm3 self) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_InverseSelf(self)


    def InverseOf(self, otherFrame):
        """InverseOf(vctFrm3 self, vctFrm3 otherFrame) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_InverseOf(self, otherFrame)


    def __eq__(self, other):
        """__eq__(vctFrm3 self, vctFrm3 other) -> bool"""
        return _cisstVectorPython.vctFrm3___eq__(self, other)


    def __str__(self):
        """__str__(vctFrm3 self) -> std::string"""
        return _cisstVectorPython.vctFrm3___str__(self)

    __swig_destroy__ = _cisstVectorPython.delete_vctFrm3
    __del__ = lambda self: None
vctFrm3_swigregister = _cisstVectorPython.vctFrm3_swigregister
vctFrm3_swigregister(vctFrm3)

def vctFrm3_Identity():
    """vctFrm3_Identity() -> vctFrm3"""
    return _cisstVectorPython.vctFrm3_Identity()


def __str__(order):
    """__str__(vctEulerRotation3Order::OrderType order) -> std::string"""
    return _cisstVectorPython.__str__(order)
class vctEulerRotation3Base(object):
    """Proxy of C++ vctEulerRotation3Base class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vctEulerRotation3Base self) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, vctEulerRotation3Base other) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, double phi, double theta, double psi) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, double * angles) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, vct3 const & angles) -> vctEulerRotation3Base
        """
        this = _cisstVectorPython.new_vctEulerRotation3Base(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstVectorPython.delete_vctEulerRotation3Base
    __del__ = lambda self: None

    def phi(self):
        """phi(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_phi(self)


    def theta(self):
        """theta(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_theta(self)


    def psi(self):
        """psi(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_psi(self)


    def alpha(self):
        """alpha(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_alpha(self)


    def beta(self):
        """beta(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_beta(self)


    def gamma(self):
        """gamma(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_gamma(self)


    def Assign(self, phi, theta, psi):
        """Assign(vctEulerRotation3Base self, double phi, double theta, double psi)"""
        return _cisstVectorPython.vctEulerRotation3Base_Assign(self, phi, theta, psi)


    def InverseSelf(self):
        """InverseSelf(vctEulerRotation3Base self) -> vctEulerRotation3Base"""
        return _cisstVectorPython.vctEulerRotation3Base_InverseSelf(self)


    def NormalizedSelf(self):
        """NormalizedSelf(vctEulerRotation3Base self) -> vctEulerRotation3Base"""
        return _cisstVectorPython.vctEulerRotation3Base_NormalizedSelf(self)


    def IsNormalized(self, *args):
        """
        IsNormalized(vctEulerRotation3Base self, double tolerance) -> bool
        IsNormalized(vctEulerRotation3Base self) -> bool
        """
        return _cisstVectorPython.vctEulerRotation3Base_IsNormalized(self, *args)

vctEulerRotation3Base_swigregister = _cisstVectorPython.vctEulerRotation3Base_swigregister
vctEulerRotation3Base_swigregister(vctEulerRotation3Base)

class vctEulerZYZRotation3(vctEulerRotation3Base):
    """Proxy of C++ vctEulerRotation3<(vctEulerRotation3Order::ZYZ)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYZ)> self) -> vctEulerZYZRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYZ)> self, vctEulerZYZRotation3 other) -> vctEulerZYZRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYZ)> self, double phi, double theta, double psi) -> vctEulerZYZRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYZ)> self, double * angles) -> vctEulerZYZRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYZ)> self, vct3 const & angles) -> vctEulerZYZRotation3
        """
        this = _cisstVectorPython.new_vctEulerZYZRotation3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstVectorPython.delete_vctEulerZYZRotation3
    __del__ = lambda self: None

    def GetAngles(self, *args):
        """
        GetAngles(vctEulerZYZRotation3 self) -> vct3 const
        GetAngles(vctEulerZYZRotation3 self) -> vct3 &
        """
        return _cisstVectorPython.vctEulerZYZRotation3_GetAngles(self, *args)


    def GetAnglesInDegrees(self):
        """GetAnglesInDegrees(vctEulerZYZRotation3 self) -> vct3"""
        return _cisstVectorPython.vctEulerZYZRotation3_GetAnglesInDegrees(self)


    def InverseOf(self, otherRotation):
        """InverseOf(vctEulerZYZRotation3 self, vctEulerZYZRotation3 otherRotation) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_InverseOf(self, otherRotation)


    def NormalizedOf(self, otherRotation):
        """NormalizedOf(vctEulerZYZRotation3 self, vctEulerZYZRotation3 otherRotation) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_NormalizedOf(self, otherRotation)


    def Normalized(self):
        """Normalized(vctEulerZYZRotation3 self) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_Normalized(self)


    def __eq__(self, other):
        """__eq__(vctEulerZYZRotation3 self, vctEulerZYZRotation3 other) -> bool"""
        return _cisstVectorPython.vctEulerZYZRotation3___eq__(self, other)


    def __str__(self):
        """__str__(vctEulerZYZRotation3 self) -> std::string"""
        return _cisstVectorPython.vctEulerZYZRotation3___str__(self)


    def From(self, matrixRot):
        """From(vctEulerZYZRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_From(self, matrixRot)


    def FromNormalized(self, matrixRot):
        """FromNormalized(vctEulerZYZRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_FromNormalized(self, matrixRot)


    def FromRaw(self, matrixRot):
        """FromRaw(vctEulerZYZRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_FromRaw(self, matrixRot)

vctEulerZYZRotation3_swigregister = _cisstVectorPython.vctEulerZYZRotation3_swigregister
vctEulerZYZRotation3_swigregister(vctEulerZYZRotation3)

class vctEulerZYXRotation3(vctEulerRotation3Base):
    """Proxy of C++ vctEulerRotation3<(vctEulerRotation3Order::ZYX)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYX)> self) -> vctEulerZYXRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYX)> self, vctEulerZYXRotation3 other) -> vctEulerZYXRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYX)> self, double phi, double theta, double psi) -> vctEulerZYXRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYX)> self, double * angles) -> vctEulerZYXRotation3
        __init__(vctEulerRotation3<(vctEulerRotation3Order::ZYX)> self, vct3 const & angles) -> vctEulerZYXRotation3
        """
        this = _cisstVectorPython.new_vctEulerZYXRotation3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstVectorPython.delete_vctEulerZYXRotation3
    __del__ = lambda self: None

    def GetAngles(self, *args):
        """
        GetAngles(vctEulerZYXRotation3 self) -> vct3 const
        GetAngles(vctEulerZYXRotation3 self) -> vct3 &
        """
        return _cisstVectorPython.vctEulerZYXRotation3_GetAngles(self, *args)


    def GetAnglesInDegrees(self):
        """GetAnglesInDegrees(vctEulerZYXRotation3 self) -> vct3"""
        return _cisstVectorPython.vctEulerZYXRotation3_GetAnglesInDegrees(self)


    def InverseOf(self, otherRotation):
        """InverseOf(vctEulerZYXRotation3 self, vctEulerZYXRotation3 otherRotation) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_InverseOf(self, otherRotation)


    def NormalizedOf(self, otherRotation):
        """NormalizedOf(vctEulerZYXRotation3 self, vctEulerZYXRotation3 otherRotation) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_NormalizedOf(self, otherRotation)


    def Normalized(self):
        """Normalized(vctEulerZYXRotation3 self) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_Normalized(self)


    def __eq__(self, other):
        """__eq__(vctEulerZYXRotation3 self, vctEulerZYXRotation3 other) -> bool"""
        return _cisstVectorPython.vctEulerZYXRotation3___eq__(self, other)


    def __str__(self):
        """__str__(vctEulerZYXRotation3 self) -> std::string"""
        return _cisstVectorPython.vctEulerZYXRotation3___str__(self)


    def From(self, matrixRot):
        """From(vctEulerZYXRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_From(self, matrixRot)


    def FromNormalized(self, matrixRot):
        """FromNormalized(vctEulerZYXRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_FromNormalized(self, matrixRot)


    def FromRaw(self, matrixRot):
        """FromRaw(vctEulerZYXRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_FromRaw(self, matrixRot)

vctEulerZYXRotation3_swigregister = _cisstVectorPython.vctEulerZYXRotation3_swigregister
vctEulerZYXRotation3_swigregister(vctEulerZYXRotation3)



