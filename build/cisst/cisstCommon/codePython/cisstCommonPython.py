# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cisstCommonPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cisstCommonPython')
    _cisstCommonPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cisstCommonPython', [dirname(__file__)])
        except ImportError:
            import _cisstCommonPython
            return _cisstCommonPython
        try:
            _mod = imp.load_module('_cisstCommonPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cisstCommonPython = swig_import_helper()
    del swig_import_helper
else:
    import _cisstCommonPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cisstCommonPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstCommonPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstCommonPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstCommonPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstCommonPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstCommonPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstCommonPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstCommonPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstCommonPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstCommonPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstCommonPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstCommonPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstCommonPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstCommonPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstCommonPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstCommonPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cisstCommonPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstCommonPython.ios_base_erase_event
    imbue_event = _cisstCommonPython.ios_base_imbue_event
    copyfmt_event = _cisstCommonPython.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _cisstCommonPython.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _cisstCommonPython.ios_base_flags(self, *args)

    def setf(self, *args):
        return _cisstCommonPython.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _cisstCommonPython.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _cisstCommonPython.ios_base_precision(self, *args)

    def width(self, *args):
        return _cisstCommonPython.ios_base_width(self, *args)
    sync_with_stdio = staticmethod(_cisstCommonPython.ios_base_sync_with_stdio)

    def imbue(self, __loc):
        return _cisstCommonPython.ios_base_imbue(self, __loc)

    def getloc(self):
        return _cisstCommonPython.ios_base_getloc(self)
    xalloc = staticmethod(_cisstCommonPython.ios_base_xalloc)

    def iword(self, __ix):
        return _cisstCommonPython.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _cisstCommonPython.ios_base_pword(self, __ix)
    __swig_destroy__ = _cisstCommonPython.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _cisstCommonPython.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _cisstCommonPython.cvar
ios_base.boolalpha = _cisstCommonPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstCommonPython.cvar.ios_base_dec
ios_base.fixed = _cisstCommonPython.cvar.ios_base_fixed
ios_base.hex = _cisstCommonPython.cvar.ios_base_hex
ios_base.internal = _cisstCommonPython.cvar.ios_base_internal
ios_base.left = _cisstCommonPython.cvar.ios_base_left
ios_base.oct = _cisstCommonPython.cvar.ios_base_oct
ios_base.right = _cisstCommonPython.cvar.ios_base_right
ios_base.scientific = _cisstCommonPython.cvar.ios_base_scientific
ios_base.showbase = _cisstCommonPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstCommonPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstCommonPython.cvar.ios_base_showpos
ios_base.skipws = _cisstCommonPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstCommonPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstCommonPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstCommonPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstCommonPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstCommonPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstCommonPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstCommonPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstCommonPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstCommonPython.cvar.ios_base_goodbit
ios_base.app = _cisstCommonPython.cvar.ios_base_app
ios_base.ate = _cisstCommonPython.cvar.ios_base_ate
ios_base.binary = _cisstCommonPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstCommonPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstCommonPython.cvar.ios_base_out
ios_base.trunc = _cisstCommonPython.cvar.ios_base_trunc
ios_base.beg = _cisstCommonPython.cvar.ios_base_beg
ios_base.cur = _cisstCommonPython.cvar.ios_base_cur
ios_base.end = _cisstCommonPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _cisstCommonPython.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _cisstCommonPython.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _cisstCommonPython.ios_base_xalloc()
ios_base_xalloc = _cisstCommonPython.ios_base_xalloc

class ios(ios_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def rdstate(self):
        return _cisstCommonPython.ios_rdstate(self)

    def clear(self, *args):
        return _cisstCommonPython.ios_clear(self, *args)

    def setstate(self, __state):
        return _cisstCommonPython.ios_setstate(self, __state)

    def good(self):
        return _cisstCommonPython.ios_good(self)

    def eof(self):
        return _cisstCommonPython.ios_eof(self)

    def fail(self):
        return _cisstCommonPython.ios_fail(self)

    def bad(self):
        return _cisstCommonPython.ios_bad(self)

    def exceptions(self, *args):
        return _cisstCommonPython.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _cisstCommonPython.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _cisstCommonPython.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _cisstCommonPython.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _cisstCommonPython.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _cisstCommonPython.ios_fill(self, *args)

    def imbue(self, __loc):
        return _cisstCommonPython.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _cisstCommonPython.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _cisstCommonPython.ios_widen(self, __c)
ios_swigregister = _cisstCommonPython.ios_swigregister
ios_swigregister(ios)

class streambuf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_streambuf
    __del__ = lambda self: None

    def pubimbue(self, __loc):
        return _cisstCommonPython.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _cisstCommonPython.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _cisstCommonPython.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _cisstCommonPython.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _cisstCommonPython.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _cisstCommonPython.streambuf_pubsync(self)

    def in_avail(self):
        return _cisstCommonPython.streambuf_in_avail(self)

    def snextc(self):
        return _cisstCommonPython.streambuf_snextc(self)

    def sbumpc(self):
        return _cisstCommonPython.streambuf_sbumpc(self)

    def sgetc(self):
        return _cisstCommonPython.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _cisstCommonPython.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _cisstCommonPython.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _cisstCommonPython.streambuf_sungetc(self)

    def sputc(self, __c):
        return _cisstCommonPython.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _cisstCommonPython.streambuf_sputn(self, __s, __n)
streambuf_swigregister = _cisstCommonPython.streambuf_swigregister
streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _cisstCommonPython.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args):
        return _cisstCommonPython.ostream___lshift__(self, *args)

    def put(self, __c):
        return _cisstCommonPython.ostream_put(self, __c)

    def write(self, __s, __n):
        return _cisstCommonPython.ostream_write(self, __s, __n)

    def flush(self):
        return _cisstCommonPython.ostream_flush(self)

    def tellp(self):
        return _cisstCommonPython.ostream_tellp(self)

    def seekp(self, *args):
        return _cisstCommonPython.ostream_seekp(self, *args)
ostream_swigregister = _cisstCommonPython.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _cisstCommonPython.new_istream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args):
        return _cisstCommonPython.istream___rshift__(self, *args)

    def gcount(self):
        return _cisstCommonPython.istream_gcount(self)

    def get(self, *args):
        return _cisstCommonPython.istream_get(self, *args)

    def getline(self, *args):
        return _cisstCommonPython.istream_getline(self, *args)

    def ignore(self, *args):
        return _cisstCommonPython.istream_ignore(self, *args)

    def peek(self):
        return _cisstCommonPython.istream_peek(self)

    def read(self, __s, __n):
        return _cisstCommonPython.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _cisstCommonPython.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _cisstCommonPython.istream_putback(self, __c)

    def unget(self):
        return _cisstCommonPython.istream_unget(self)

    def sync(self):
        return _cisstCommonPython.istream_sync(self)

    def tellg(self):
        return _cisstCommonPython.istream_tellg(self)

    def seekg(self, *args):
        return _cisstCommonPython.istream_seekg(self, *args)
istream_swigregister = _cisstCommonPython.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _cisstCommonPython.new_iostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _cisstCommonPython.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _cisstCommonPython.endl_cb_ptr

def endl(arg1):
    return _cisstCommonPython.endl(arg1)
endl = _cisstCommonPython.endl
ends_cb_ptr = _cisstCommonPython.ends_cb_ptr

def ends(arg1):
    return _cisstCommonPython.ends(arg1)
ends = _cisstCommonPython.ends
flush_cb_ptr = _cisstCommonPython.flush_cb_ptr

def flush(arg1):
    return _cisstCommonPython.flush(arg1)
flush = _cisstCommonPython.flush
class cmnGenericObject(object):
    """Proxy of C++ cmnGenericObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_cmnGenericObject
    __del__ = lambda self: None

    def Services(self):
        """Services(cmnGenericObject self) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnGenericObject_Services(self)


    def ReconstructFrom(self, other):
        """ReconstructFrom(cmnGenericObject self, cmnGenericObject other) -> bool"""
        return _cisstCommonPython.cmnGenericObject_ReconstructFrom(self, other)


    def ToString(self):
        """ToString(cmnGenericObject self) -> std::string"""
        return _cisstCommonPython.cmnGenericObject_ToString(self)


    def GetLogMultiplexer(self):
        """GetLogMultiplexer(cmnGenericObject self) -> cmnLODMultiplexerStreambufChar"""
        return _cisstCommonPython.cmnGenericObject_GetLogMultiplexer(self)


    def ScalarNumber(self):
        """ScalarNumber(cmnGenericObject self) -> size_t"""
        return _cisstCommonPython.cmnGenericObject_ScalarNumber(self)


    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(cmnGenericObject self) -> bool"""
        return _cisstCommonPython.cmnGenericObject_ScalarNumberIsFixed(self)


    def Scalar(self, MARKED_AS_UNUSEDindex):
        """Scalar(cmnGenericObject self, size_t const MARKED_AS_UNUSEDindex) -> double"""
        return _cisstCommonPython.cmnGenericObject_Scalar(self, MARKED_AS_UNUSEDindex)


    def ScalarDescription(self, MARKED_AS_UNUSEDindex, MARKED_AS_UNUSEDuserDescription):
        """ScalarDescription(cmnGenericObject self, size_t const MARKED_AS_UNUSEDindex, std::string const & MARKED_AS_UNUSEDuserDescription) -> std::string"""
        return _cisstCommonPython.cmnGenericObject_ScalarDescription(self, MARKED_AS_UNUSEDindex, MARKED_AS_UNUSEDuserDescription)

cmnGenericObject_swigregister = _cisstCommonPython.cmnGenericObject_swigregister
cmnGenericObject_swigregister(cmnGenericObject)

class cmnClassServicesBase(object):
    """Proxy of C++ cmnClassServicesBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_cmnClassServicesBase
    __del__ = lambda self: None

    def CreateWithArg(self, arg):
        """CreateWithArg(cmnClassServicesBase self, cmnGenericObject arg) -> cmnGenericObject"""
        return _cisstCommonPython.cmnClassServicesBase_CreateWithArg(self, arg)


    def Create(self, *args):
        """
        Create(cmnClassServicesBase self) -> cmnGenericObject
        Create(cmnClassServicesBase self, cmnGenericObject other) -> cmnGenericObject
        Create(cmnClassServicesBase self, cmnGenericObject existing, cmnGenericObject other) -> bool
        """
        return _cisstCommonPython.cmnClassServicesBase_Create(self, *args)


    def CreateArray(self, *args):
        """
        CreateArray(cmnClassServicesBase self, size_t size) -> cmnGenericObject
        CreateArray(cmnClassServicesBase self, size_t size, cmnGenericObject other) -> cmnGenericObject
        """
        return _cisstCommonPython.cmnClassServicesBase_CreateArray(self, *args)


    def DeleteArray(self, data, size):
        """DeleteArray(cmnClassServicesBase self, cmnClassServicesBase::generic_pointer & data, size_t & size) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_DeleteArray(self, data, size)


    def Delete(self, existing):
        """Delete(cmnClassServicesBase self, cmnGenericObject existing) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_Delete(self, existing)


    def GetSize(self):
        """GetSize(cmnClassServicesBase self) -> size_t"""
        return _cisstCommonPython.cmnClassServicesBase_GetSize(self)


    def HasDynamicCreation(self):
        """HasDynamicCreation(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_HasDynamicCreation(self)


    def DefaultConstructorAvailable(self):
        """DefaultConstructorAvailable(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_DefaultConstructorAvailable(self)


    def CopyConstructorAvailable(self):
        """CopyConstructorAvailable(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_CopyConstructorAvailable(self)


    def OneArgConstructorAvailable(self):
        """OneArgConstructorAvailable(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_OneArgConstructorAvailable(self)


    def GetConstructorArgServices(self):
        """GetConstructorArgServices(cmnClassServicesBase self) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnClassServicesBase_GetConstructorArgServices(self)


    def GetName(self):
        """GetName(cmnClassServicesBase self) -> std::string const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetName(self)


    def TypeInfoPointer(self):
        """TypeInfoPointer(cmnClassServicesBase self) -> std::type_info const *"""
        return _cisstCommonPython.cmnClassServicesBase_TypeInfoPointer(self)


    def GetLogMask(self):
        """GetLogMask(cmnClassServicesBase self) -> cmnLogMask const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetLogMask(self)


    def GetLoD(self):
        """GetLoD(cmnClassServicesBase self) -> cmnLogMask const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetLoD(self)


    def SetLogMask(self, mask):
        """SetLogMask(cmnClassServicesBase self, cmnLogMask mask)"""
        return _cisstCommonPython.cmnClassServicesBase_SetLogMask(self, mask)


    def GetParentServices(self):
        """GetParentServices(cmnClassServicesBase self) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnClassServicesBase_GetParentServices(self)


    def IsDerivedFrom(self, parentServices):
        """IsDerivedFrom(cmnClassServicesBase self, cmnClassServicesBase parentServices) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_IsDerivedFrom(self, parentServices)


    def GetLibraryName(self):
        """GetLibraryName(cmnClassServicesBase self) -> std::string const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetLibraryName(self)

cmnClassServicesBase_swigregister = _cisstCommonPython.cmnClassServicesBase_swigregister
cmnClassServicesBase_swigregister(cmnClassServicesBase)

class cmnClassRegister(object):
    """Proxy of C++ cmnClassRegister class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FindClassServicesInstance(self, *args):
        """
        FindClassServicesInstance(cmnClassRegister self, std::string const & className) -> cmnClassServicesBase
        FindClassServicesInstance(cmnClassRegister self, std::type_info const & typeInfo) -> cmnClassServicesBase
        """
        return _cisstCommonPython.cmnClassRegister_FindClassServicesInstance(self, *args)


    def RegisterInstance(self, classServicesPointer, className):
        """RegisterInstance(cmnClassRegister self, cmnClassServicesBase classServicesPointer, std::string const & className) -> std::string const *"""
        return _cisstCommonPython.cmnClassRegister_RegisterInstance(self, classServicesPointer, className)


    def SetLogMaskClassAllInstance(self, mask):
        """SetLogMaskClassAllInstance(cmnClassRegister self, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassAllInstance(self, mask)


    def SetLogMaskClassMatchingInstance(self, stringToMatch, mask):
        """SetLogMaskClassMatchingInstance(cmnClassRegister self, std::string const & stringToMatch, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassMatchingInstance(self, stringToMatch, mask)


    def ToStringInstance(self):
        """ToStringInstance(cmnClassRegister self) -> std::string"""
        return _cisstCommonPython.cmnClassRegister_ToStringInstance(self)


    def ToStreamInstance(self, outputStream):
        """ToStreamInstance(cmnClassRegister self, ostream outputStream)"""
        return _cisstCommonPython.cmnClassRegister_ToStreamInstance(self, outputStream)


    def sizeInstance(self):
        """sizeInstance(cmnClassRegister self) -> cmnClassRegister::size_type"""
        return _cisstCommonPython.cmnClassRegister_sizeInstance(self)


    def beginInstance(self):
        """beginInstance(cmnClassRegister self) -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_beginInstance(self)


    def endInstance(self):
        """endInstance(cmnClassRegister self) -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_endInstance(self)


    def Instance():
        """Instance() -> cmnClassRegister"""
        return _cisstCommonPython.cmnClassRegister_Instance()

    Instance = staticmethod(Instance)

    def Register(classServicesPointer, className):
        """Register(cmnClassServicesBase classServicesPointer, std::string const & className) -> std::string const *"""
        return _cisstCommonPython.cmnClassRegister_Register(classServicesPointer, className)

    Register = staticmethod(Register)

    def SetLogMaskClass(className, mask):
        """SetLogMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClass(className, mask)

    SetLogMaskClass = staticmethod(SetLogMaskClass)

    def SetLogMaskClassAll(mask):
        """SetLogMaskClassAll(cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassAll(mask)

    SetLogMaskClassAll = staticmethod(SetLogMaskClassAll)

    def SetLogMaskClassMatching(stringToMatch, mask):
        """SetLogMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassMatching(stringToMatch, mask)

    SetLogMaskClassMatching = staticmethod(SetLogMaskClassMatching)

    def FindClassServices(*args):
        """
        FindClassServices(std::string const & className) -> cmnClassServicesBase
        FindClassServices(std::type_info const & typeInfo) -> cmnClassServicesBase
        """
        return _cisstCommonPython.cmnClassRegister_FindClassServices(*args)

    FindClassServices = staticmethod(FindClassServices)

    def Create(*args):
        """
        Create(std::string const & className) -> cmnGenericObject
        Create(std::string const & className, cmnGenericObject other) -> cmnGenericObject
        """
        return _cisstCommonPython.cmnClassRegister_Create(*args)

    Create = staticmethod(Create)

    def ToString():
        """ToString() -> std::string"""
        return _cisstCommonPython.cmnClassRegister_ToString()

    ToString = staticmethod(ToString)

    def size():
        """size() -> cmnClassRegister::size_type"""
        return _cisstCommonPython.cmnClassRegister_size()

    size = staticmethod(size)

    def begin():
        """begin() -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_begin()

    begin = staticmethod(begin)

    def end():
        """end() -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_end()

    end = staticmethod(end)

    def iterator(self):
        """iterator(cmnClassRegister self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassRegister_iterator(self)


    def __iter__(self):
        return self.iterator()

    __swig_destroy__ = _cisstCommonPython.delete_cmnClassRegister
    __del__ = lambda self: None
cmnClassRegister_swigregister = _cisstCommonPython.cmnClassRegister_swigregister
cmnClassRegister_swigregister(cmnClassRegister)

def cmnClassRegister_Instance():
    """cmnClassRegister_Instance() -> cmnClassRegister"""
    return _cisstCommonPython.cmnClassRegister_Instance()

def cmnClassRegister_Register(classServicesPointer, className):
    """cmnClassRegister_Register(cmnClassServicesBase classServicesPointer, std::string const & className) -> std::string const *"""
    return _cisstCommonPython.cmnClassRegister_Register(classServicesPointer, className)

def cmnClassRegister_SetLogMaskClass(className, mask):
    """cmnClassRegister_SetLogMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnClassRegister_SetLogMaskClass(className, mask)

def cmnClassRegister_SetLogMaskClassAll(mask):
    """cmnClassRegister_SetLogMaskClassAll(cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnClassRegister_SetLogMaskClassAll(mask)

def cmnClassRegister_SetLogMaskClassMatching(stringToMatch, mask):
    """cmnClassRegister_SetLogMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnClassRegister_SetLogMaskClassMatching(stringToMatch, mask)

def cmnClassRegister_FindClassServices(*args):
    """
    FindClassServices(std::string const & className) -> cmnClassServicesBase
    cmnClassRegister_FindClassServices(std::type_info const & typeInfo) -> cmnClassServicesBase
    """
    return _cisstCommonPython.cmnClassRegister_FindClassServices(*args)

def cmnClassRegister_Create(*args):
    """
    Create(std::string const & className) -> cmnGenericObject
    cmnClassRegister_Create(std::string const & className, cmnGenericObject other) -> cmnGenericObject
    """
    return _cisstCommonPython.cmnClassRegister_Create(*args)

def cmnClassRegister_ToString():
    """cmnClassRegister_ToString() -> std::string"""
    return _cisstCommonPython.cmnClassRegister_ToString()

def cmnClassRegister_size():
    """cmnClassRegister_size() -> cmnClassRegister::size_type"""
    return _cisstCommonPython.cmnClassRegister_size()

def cmnClassRegister_begin():
    """cmnClassRegister_begin() -> cmnClassRegister::const_iterator"""
    return _cisstCommonPython.cmnClassRegister_begin()

def cmnClassRegister_end():
    """cmnClassRegister_end() -> cmnClassRegister::const_iterator"""
    return _cisstCommonPython.cmnClassRegister_end()

LIBRARY_NAME_FOR_CISST_REGISTER = _cisstCommonPython.LIBRARY_NAME_FOR_CISST_REGISTER
class cmnClassServicesContainer(object):
    """Proxy of C++ std::map<(std::string,p.cmnClassServicesBase)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(cmnClassServicesContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassServicesContainer_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(cmnClassServicesContainer self) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer___nonzero__(self)


    def __bool__(self):
        """__bool__(cmnClassServicesContainer self) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer___bool__(self)


    def __len__(self):
        """__len__(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::size_type"""
        return _cisstCommonPython.cmnClassServicesContainer___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnClassServicesContainer___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key)"""
        return _cisstCommonPython.cmnClassServicesContainer___delitem__(self, key)


    def has_key(self, key):
        """has_key(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer_has_key(self, key)


    def keys(self):
        """keys(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_keys(self)


    def values(self):
        """values(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_values(self)


    def items(self):
        """items(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_items(self)


    def __contains__(self, key):
        """__contains__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer___contains__(self, key)


    def key_iterator(self):
        """key_iterator(cmnClassServicesContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassServicesContainer_key_iterator(self)


    def value_iterator(self):
        """value_iterator(cmnClassServicesContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassServicesContainer_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key)
        __setitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key, cmnClassServicesBase x)
        """
        return _cisstCommonPython.cmnClassServicesContainer___setitem__(self, *args)


    def asdict(self):
        """asdict(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,p.cmnClassServicesBase)> self, std::less< std::string > const & arg2) -> cmnClassServicesContainer
        __init__(std::map<(std::string,p.cmnClassServicesBase)> self) -> cmnClassServicesContainer
        __init__(std::map<(std::string,p.cmnClassServicesBase)> self, cmnClassServicesContainer arg2) -> cmnClassServicesContainer
        """
        this = _cisstCommonPython.new_cmnClassServicesContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """empty(cmnClassServicesContainer self) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer_empty(self)


    def size(self):
        """size(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::size_type"""
        return _cisstCommonPython.cmnClassServicesContainer_size(self)


    def swap(self, v):
        """swap(cmnClassServicesContainer self, cmnClassServicesContainer v)"""
        return _cisstCommonPython.cmnClassServicesContainer_swap(self, v)


    def begin(self):
        """begin(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_begin(self)


    def end(self):
        """end(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_end(self)


    def rbegin(self):
        """rbegin(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::reverse_iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_rbegin(self)


    def rend(self):
        """rend(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::reverse_iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_rend(self)


    def clear(self):
        """clear(cmnClassServicesContainer self)"""
        return _cisstCommonPython.cmnClassServicesContainer_clear(self)


    def get_allocator(self):
        """get_allocator(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::allocator_type"""
        return _cisstCommonPython.cmnClassServicesContainer_get_allocator(self)


    def count(self, x):
        """count(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::size_type"""
        return _cisstCommonPython.cmnClassServicesContainer_count(self, x)


    def erase(self, *args):
        """
        erase(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::size_type
        erase(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::iterator position)
        erase(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::iterator first, std::map< std::string,cmnClassServicesBase * >::iterator last)
        """
        return _cisstCommonPython.cmnClassServicesContainer_erase(self, *args)


    def find(self, x):
        """find(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_find(self, x)


    def lower_bound(self, x):
        """lower_bound(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_upper_bound(self, x)

    __swig_destroy__ = _cisstCommonPython.delete_cmnClassServicesContainer
    __del__ = lambda self: None
cmnClassServicesContainer_swigregister = _cisstCommonPython.cmnClassServicesContainer_swigregister
cmnClassServicesContainer_swigregister(cmnClassServicesContainer)
CMN_NO_DYNAMIC_CREATION = cvar.CMN_NO_DYNAMIC_CREATION
CMN_DYNAMIC_CREATION_DEFAULT = cvar.CMN_DYNAMIC_CREATION_DEFAULT
CMN_DYNAMIC_CREATION_COPY = cvar.CMN_DYNAMIC_CREATION_COPY
CMN_DYNAMIC_CREATION = cvar.CMN_DYNAMIC_CREATION
CMN_DYNAMIC_CREATION_SETNAME = cvar.CMN_DYNAMIC_CREATION_SETNAME
CMN_DYNAMIC_CREATION_ONEARG = cvar.CMN_DYNAMIC_CREATION_ONEARG

class cmnObjectRegister(object):
    """Proxy of C++ cmnObjectRegister class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Instance():
        """Instance() -> cmnObjectRegister"""
        return _cisstCommonPython.cmnObjectRegister_Instance()

    Instance = staticmethod(Instance)

    def Register(objectName, objectPointer):
        """Register(std::string const & objectName, cmnGenericObject objectPointer) -> bool"""
        return _cisstCommonPython.cmnObjectRegister_Register(objectName, objectPointer)

    Register = staticmethod(Register)

    def Remove(objectName):
        """Remove(std::string const & objectName) -> bool"""
        return _cisstCommonPython.cmnObjectRegister_Remove(objectName)

    Remove = staticmethod(Remove)

    def FindObject(objectName):
        """FindObject(std::string const & objectName) -> cmnGenericObject"""
        return _cisstCommonPython.cmnObjectRegister_FindObject(objectName)

    FindObject = staticmethod(FindObject)

    def FindName(objectPointer):
        """FindName(cmnGenericObject objectPointer) -> std::string"""
        return _cisstCommonPython.cmnObjectRegister_FindName(objectPointer)

    FindName = staticmethod(FindName)

    def ToString():
        """ToString() -> std::string"""
        return _cisstCommonPython.cmnObjectRegister_ToString()

    ToString = staticmethod(ToString)

    def begin():
        """begin() -> cmnObjectRegister::const_iterator"""
        return _cisstCommonPython.cmnObjectRegister_begin()

    begin = staticmethod(begin)

    def end():
        """end() -> cmnObjectRegister::const_iterator"""
        return _cisstCommonPython.cmnObjectRegister_end()

    end = staticmethod(end)

    def iterator(self):
        """iterator(cmnObjectRegister self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnObjectRegister_iterator(self)


    def __iter__(self):
        return self.iterator()

cmnObjectRegister_swigregister = _cisstCommonPython.cmnObjectRegister_swigregister
cmnObjectRegister_swigregister(cmnObjectRegister)

def cmnObjectRegister_Instance():
    """cmnObjectRegister_Instance() -> cmnObjectRegister"""
    return _cisstCommonPython.cmnObjectRegister_Instance()

def cmnObjectRegister_Register(objectName, objectPointer):
    """cmnObjectRegister_Register(std::string const & objectName, cmnGenericObject objectPointer) -> bool"""
    return _cisstCommonPython.cmnObjectRegister_Register(objectName, objectPointer)

def cmnObjectRegister_Remove(objectName):
    """cmnObjectRegister_Remove(std::string const & objectName) -> bool"""
    return _cisstCommonPython.cmnObjectRegister_Remove(objectName)

def cmnObjectRegister_FindObject(objectName):
    """cmnObjectRegister_FindObject(std::string const & objectName) -> cmnGenericObject"""
    return _cisstCommonPython.cmnObjectRegister_FindObject(objectName)

def cmnObjectRegister_FindName(objectPointer):
    """cmnObjectRegister_FindName(cmnGenericObject objectPointer) -> std::string"""
    return _cisstCommonPython.cmnObjectRegister_FindName(objectPointer)

def cmnObjectRegister_ToString():
    """cmnObjectRegister_ToString() -> std::string"""
    return _cisstCommonPython.cmnObjectRegister_ToString()

def cmnObjectRegister_begin():
    """cmnObjectRegister_begin() -> cmnObjectRegister::const_iterator"""
    return _cisstCommonPython.cmnObjectRegister_begin()

def cmnObjectRegister_end():
    """cmnObjectRegister_end() -> cmnObjectRegister::const_iterator"""
    return _cisstCommonPython.cmnObjectRegister_end()

class cmnGenericObjectContainer(object):
    """Proxy of C++ std::map<(std::string,p.cmnGenericObject)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(cmnGenericObjectContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(cmnGenericObjectContainer self) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer___nonzero__(self)


    def __bool__(self):
        """__bool__(cmnGenericObjectContainer self) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer___bool__(self)


    def __len__(self):
        """__len__(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::size_type"""
        return _cisstCommonPython.cmnGenericObjectContainer___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key) -> cmnGenericObject"""
        return _cisstCommonPython.cmnGenericObjectContainer___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key)"""
        return _cisstCommonPython.cmnGenericObjectContainer___delitem__(self, key)


    def has_key(self, key):
        """has_key(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer_has_key(self, key)


    def keys(self):
        """keys(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_keys(self)


    def values(self):
        """values(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_values(self)


    def items(self):
        """items(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_items(self)


    def __contains__(self, key):
        """__contains__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer___contains__(self, key)


    def key_iterator(self):
        """key_iterator(cmnGenericObjectContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_key_iterator(self)


    def value_iterator(self):
        """value_iterator(cmnGenericObjectContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key)
        __setitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key, cmnGenericObject x)
        """
        return _cisstCommonPython.cmnGenericObjectContainer___setitem__(self, *args)


    def asdict(self):
        """asdict(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,p.cmnGenericObject)> self, std::less< std::string > const & arg2) -> cmnGenericObjectContainer
        __init__(std::map<(std::string,p.cmnGenericObject)> self) -> cmnGenericObjectContainer
        __init__(std::map<(std::string,p.cmnGenericObject)> self, cmnGenericObjectContainer arg2) -> cmnGenericObjectContainer
        """
        this = _cisstCommonPython.new_cmnGenericObjectContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """empty(cmnGenericObjectContainer self) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer_empty(self)


    def size(self):
        """size(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::size_type"""
        return _cisstCommonPython.cmnGenericObjectContainer_size(self)


    def swap(self, v):
        """swap(cmnGenericObjectContainer self, cmnGenericObjectContainer v)"""
        return _cisstCommonPython.cmnGenericObjectContainer_swap(self, v)


    def begin(self):
        """begin(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_begin(self)


    def end(self):
        """end(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_end(self)


    def rbegin(self):
        """rbegin(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::reverse_iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_rbegin(self)


    def rend(self):
        """rend(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::reverse_iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_rend(self)


    def clear(self):
        """clear(cmnGenericObjectContainer self)"""
        return _cisstCommonPython.cmnGenericObjectContainer_clear(self)


    def get_allocator(self):
        """get_allocator(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::allocator_type"""
        return _cisstCommonPython.cmnGenericObjectContainer_get_allocator(self)


    def count(self, x):
        """count(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::size_type"""
        return _cisstCommonPython.cmnGenericObjectContainer_count(self, x)


    def erase(self, *args):
        """
        erase(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::size_type
        erase(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::iterator position)
        erase(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::iterator first, std::map< std::string,cmnGenericObject * >::iterator last)
        """
        return _cisstCommonPython.cmnGenericObjectContainer_erase(self, *args)


    def find(self, x):
        """find(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_find(self, x)


    def lower_bound(self, x):
        """lower_bound(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_upper_bound(self, x)

    __swig_destroy__ = _cisstCommonPython.delete_cmnGenericObjectContainer
    __del__ = lambda self: None
cmnGenericObjectContainer_swigregister = _cisstCommonPython.cmnGenericObjectContainer_swigregister
cmnGenericObjectContainer_swigregister(cmnGenericObjectContainer)

class cmnDouble(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnDouble_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnDouble_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnDouble_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnDouble_Data_get, _cisstCommonPython.cmnDouble_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(double)> self) -> cmnDouble
        __init__(cmnGenericObjectProxy<(double)> self, cmnGenericObjectProxy< double >::value_type const & data) -> cmnDouble
        """
        this = _cisstCommonPython.new_cmnDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnDouble
    __del__ = lambda self: None
cmnDouble_swigregister = _cisstCommonPython.cmnDouble_swigregister
cmnDouble_swigregister(cmnDouble)

def cmnDouble_ClassServices():
    """cmnDouble_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnDouble_ClassServices()

class cmnInt(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnInt_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnInt_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnInt_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnInt_Data_get, _cisstCommonPython.cmnInt_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(int)> self) -> cmnInt
        __init__(cmnGenericObjectProxy<(int)> self, cmnGenericObjectProxy< int >::value_type const & data) -> cmnInt
        """
        this = _cisstCommonPython.new_cmnInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnInt
    __del__ = lambda self: None
cmnInt_swigregister = _cisstCommonPython.cmnInt_swigregister
cmnInt_swigregister(cmnInt)

def cmnInt_ClassServices():
    """cmnInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnInt_ClassServices()

class cmnUInt(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(unsigned int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnUInt_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnUInt_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnUInt_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnUInt_Data_get, _cisstCommonPython.cmnUInt_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(unsigned int)> self) -> cmnUInt
        __init__(cmnGenericObjectProxy<(unsigned int)> self, cmnGenericObjectProxy< unsigned int >::value_type const & data) -> cmnUInt
        """
        this = _cisstCommonPython.new_cmnUInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnUInt
    __del__ = lambda self: None
cmnUInt_swigregister = _cisstCommonPython.cmnUInt_swigregister
cmnUInt_swigregister(cmnUInt)

def cmnUInt_ClassServices():
    """cmnUInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnUInt_ClassServices()

class cmnShort(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnShort_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnShort_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnShort_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnShort_Data_get, _cisstCommonPython.cmnShort_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(short)> self) -> cmnShort
        __init__(cmnGenericObjectProxy<(short)> self, cmnGenericObjectProxy< short >::value_type const & data) -> cmnShort
        """
        this = _cisstCommonPython.new_cmnShort(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnShort
    __del__ = lambda self: None
cmnShort_swigregister = _cisstCommonPython.cmnShort_swigregister
cmnShort_swigregister(cmnShort)

def cmnShort_ClassServices():
    """cmnShort_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnShort_ClassServices()

class cmnUShort(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(unsigned short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnUShort_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnUShort_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnUShort_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnUShort_Data_get, _cisstCommonPython.cmnUShort_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(unsigned short)> self) -> cmnUShort
        __init__(cmnGenericObjectProxy<(unsigned short)> self, cmnGenericObjectProxy< unsigned short >::value_type const & data) -> cmnUShort
        """
        this = _cisstCommonPython.new_cmnUShort(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnUShort
    __del__ = lambda self: None
cmnUShort_swigregister = _cisstCommonPython.cmnUShort_swigregister
cmnUShort_swigregister(cmnUShort)

def cmnUShort_ClassServices():
    """cmnUShort_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnUShort_ClassServices()

class cmnLong(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnLong_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnLong_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnLong_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnLong_Data_get, _cisstCommonPython.cmnLong_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(long)> self) -> cmnLong
        __init__(cmnGenericObjectProxy<(long)> self, cmnGenericObjectProxy< long >::value_type const & data) -> cmnLong
        """
        this = _cisstCommonPython.new_cmnLong(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnLong
    __del__ = lambda self: None
cmnLong_swigregister = _cisstCommonPython.cmnLong_swigregister
cmnLong_swigregister(cmnLong)

def cmnLong_ClassServices():
    """cmnLong_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnLong_ClassServices()

class cmnULong(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(unsigned long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnULong_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnULong_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnULong_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnULong_Data_get, _cisstCommonPython.cmnULong_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(unsigned long)> self) -> cmnULong
        __init__(cmnGenericObjectProxy<(unsigned long)> self, cmnGenericObjectProxy< unsigned long >::value_type const & data) -> cmnULong
        """
        this = _cisstCommonPython.new_cmnULong(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnULong
    __del__ = lambda self: None
cmnULong_swigregister = _cisstCommonPython.cmnULong_swigregister
cmnULong_swigregister(cmnULong)

def cmnULong_ClassServices():
    """cmnULong_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnULong_ClassServices()

class cmnBool(cmnGenericObject):
    """Proxy of C++ cmnGenericObjectProxy<(bool)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnBool_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnBool_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnBool_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstCommonPython.cmnBool_Data_get, _cisstCommonPython.cmnBool_Data_set)

    def __init__(self, *args):
        """
        __init__(cmnGenericObjectProxy<(bool)> self) -> cmnBool
        __init__(cmnGenericObjectProxy<(bool)> self, cmnGenericObjectProxy< bool >::value_type const & data) -> cmnBool
        """
        this = _cisstCommonPython.new_cmnBool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnBool
    __del__ = lambda self: None
cmnBool_swigregister = _cisstCommonPython.cmnBool_swigregister
cmnBool_swigregister(cmnBool)

def cmnBool_ClassServices():
    """cmnBool_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnBool_ClassServices()

class cmnLODMultiplexerStreambufChar(streambuf):
    """Proxy of C++ cmnLODMultiplexerStreambuf<(char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cmnLODMultiplexerStreambuf<(char)> self, std::ofstream & fileStream) -> cmnLODMultiplexerStreambufChar
        __init__(cmnLODMultiplexerStreambuf<(char)> self) -> cmnLODMultiplexerStreambufChar
        """
        this = _cisstCommonPython.new_cmnLODMultiplexerStreambufChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddChannel(self, *args):
        """
        AddChannel(cmnLODMultiplexerStreambufChar self, streambuf channel, cmnLogMask mask) -> bool
        AddChannel(cmnLODMultiplexerStreambufChar self, ostream outstream, cmnLogMask mask) -> bool
        """
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_AddChannel(self, *args)


    def AddMultiplexer(self, multiplexer):
        """AddMultiplexer(cmnLODMultiplexerStreambufChar self, cmnLODMultiplexerStreambufChar multiplexer) -> bool"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_AddMultiplexer(self, multiplexer)


    def RemoveMultiplexer(self, multiplexer):
        """RemoveMultiplexer(cmnLODMultiplexerStreambufChar self, cmnLODMultiplexerStreambufChar multiplexer)"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_RemoveMultiplexer(self, multiplexer)


    def RemoveChannel(self, *args):
        """
        RemoveChannel(cmnLODMultiplexerStreambufChar self, streambuf channel)
        RemoveChannel(cmnLODMultiplexerStreambufChar self, ostream outstream)
        """
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_RemoveChannel(self, *args)


    def RemoveAllChannels(self):
        """RemoveAllChannels(cmnLODMultiplexerStreambufChar self)"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_RemoveAllChannels(self)


    def SetChannelMask(self, channel, mask):
        """SetChannelMask(cmnLODMultiplexerStreambufChar self, streambuf channel, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_SetChannelMask(self, channel, mask)


    def GetChannelMask(self, channel, mask):
        """GetChannelMask(cmnLODMultiplexerStreambufChar self, streambuf channel, cmnLogMask & mask) -> bool"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_GetChannelMask(self, channel, mask)


    def GetChannels(self):
        """GetChannels(cmnLODMultiplexerStreambufChar self) -> cmnLODMultiplexerStreambuf< char >::ChannelContainerType const &"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_GetChannels(self)

    __swig_destroy__ = _cisstCommonPython.delete_cmnLODMultiplexerStreambufChar
    __del__ = lambda self: None
cmnLODMultiplexerStreambufChar_swigregister = _cisstCommonPython.cmnLODMultiplexerStreambufChar_swigregister
cmnLODMultiplexerStreambufChar_swigregister(cmnLODMultiplexerStreambufChar)

class cmnCallbackStreambufChar(streambuf):
    """Proxy of C++ cmnCallbackStreambuf<(char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, func):
        """__init__(cmnCallbackStreambuf<(char)> self, cmnCallbackStreambuf< char >::CallbackType func) -> cmnCallbackStreambufChar"""
        this = _cisstCommonPython.new_cmnCallbackStreambufChar(func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnCallbackStreambufChar
    __del__ = lambda self: None
cmnCallbackStreambufChar_swigregister = _cisstCommonPython.cmnCallbackStreambufChar_swigregister
cmnCallbackStreambufChar_swigregister(cmnCallbackStreambufChar)

CMN_LOG_LEVEL_NONE = _cisstCommonPython.CMN_LOG_LEVEL_NONE
CMN_LOG_LEVEL_INIT_ERROR = _cisstCommonPython.CMN_LOG_LEVEL_INIT_ERROR
CMN_LOG_LEVEL_INIT_WARNING = _cisstCommonPython.CMN_LOG_LEVEL_INIT_WARNING
CMN_LOG_LEVEL_INIT_VERBOSE = _cisstCommonPython.CMN_LOG_LEVEL_INIT_VERBOSE
CMN_LOG_LEVEL_INIT_DEBUG = _cisstCommonPython.CMN_LOG_LEVEL_INIT_DEBUG
CMN_LOG_LEVEL_RUN_ERROR = _cisstCommonPython.CMN_LOG_LEVEL_RUN_ERROR
CMN_LOG_LEVEL_RUN_WARNING = _cisstCommonPython.CMN_LOG_LEVEL_RUN_WARNING
CMN_LOG_LEVEL_RUN_VERBOSE = _cisstCommonPython.CMN_LOG_LEVEL_RUN_VERBOSE
CMN_LOG_LEVEL_RUN_DEBUG = _cisstCommonPython.CMN_LOG_LEVEL_RUN_DEBUG
CMN_LOG_ALLOW_NONE = _cisstCommonPython.CMN_LOG_ALLOW_NONE
CMN_LOG_ALLOW_ERRORS = _cisstCommonPython.CMN_LOG_ALLOW_ERRORS
CMN_LOG_ALLOW_WARNINGS = _cisstCommonPython.CMN_LOG_ALLOW_WARNINGS
CMN_LOG_ALLOW_ERRORS_AND_WARNINGS = _cisstCommonPython.CMN_LOG_ALLOW_ERRORS_AND_WARNINGS
CMN_LOG_ALLOW_VERBOSE = _cisstCommonPython.CMN_LOG_ALLOW_VERBOSE
CMN_LOG_ALLOW_DEBUG = _cisstCommonPython.CMN_LOG_ALLOW_DEBUG
CMN_LOG_ALLOW_ALL = _cisstCommonPython.CMN_LOG_ALLOW_ALL
CMN_LOG_ALLOW_DEFAULT = _cisstCommonPython.CMN_LOG_ALLOW_DEFAULT

def cmnLogLevelToIndex(level):
    """cmnLogLevelToIndex(cmnLogLevel const & level) -> size_t"""
    return _cisstCommonPython.cmnLogLevelToIndex(level)

def cmnIndexToLogLevel(index):
    """cmnIndexToLogLevel(size_t const & index) -> cmnLogLevel"""
    return _cisstCommonPython.cmnIndexToLogLevel(index)

def cmnLogIndexToString(index):
    """cmnLogIndexToString(size_t const & index) -> std::string const &"""
    return _cisstCommonPython.cmnLogIndexToString(index)

def cmnLogLevelToString(level):
    """cmnLogLevelToString(cmnLogLevel const & level) -> std::string const &"""
    return _cisstCommonPython.cmnLogLevelToString(level)

def cmnLogMaskToString(mask):
    """cmnLogMaskToString(cmnLogMask const & mask) -> std::string"""
    return _cisstCommonPython.cmnLogMaskToString(mask)
class cmnLogger(object):
    """Proxy of C++ cmnLogger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Instance():
        """Instance() -> cmnLogger"""
        return _cisstCommonPython.cmnLogger_Instance()

    Instance = staticmethod(Instance)

    def SetMask(mask):
        """SetMask(cmnLogMask mask)"""
        return _cisstCommonPython.cmnLogger_SetMask(mask)

    SetMask = staticmethod(SetMask)

    def GetMask():
        """GetMask() -> cmnLogMask"""
        return _cisstCommonPython.cmnLogger_GetMask()

    GetMask = staticmethod(GetMask)

    def SetMaskFunction(mask):
        """SetMaskFunction(cmnLogMask mask)"""
        return _cisstCommonPython.cmnLogger_SetMaskFunction(mask)

    SetMaskFunction = staticmethod(SetMaskFunction)

    def GetMaskFunction():
        """GetMaskFunction() -> cmnLogMask"""
        return _cisstCommonPython.cmnLogger_GetMaskFunction()

    GetMaskFunction = staticmethod(GetMaskFunction)

    def SetMaskClass(className, mask):
        """SetMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLogger_SetMaskClass(className, mask)

    SetMaskClass = staticmethod(SetMaskClass)

    def SetMaskClassAll(mask):
        """SetMaskClassAll(cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLogger_SetMaskClassAll(mask)

    SetMaskClassAll = staticmethod(SetMaskClassAll)

    def SetMaskClassMatching(stringToMatch, mask):
        """SetMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLogger_SetMaskClassMatching(stringToMatch, mask)

    SetMaskClassMatching = staticmethod(SetMaskClassMatching)

    def GetMultiplexer():
        """GetMultiplexer() -> cmnLODMultiplexerStreambufChar"""
        return _cisstCommonPython.cmnLogger_GetMultiplexer()

    GetMultiplexer = staticmethod(GetMultiplexer)

    def HaltDefaultLog():
        """HaltDefaultLog()"""
        return _cisstCommonPython.cmnLogger_HaltDefaultLog()

    HaltDefaultLog = staticmethod(HaltDefaultLog)

    def ResumeDefaultLog(newLoD=0x33):
        """
        ResumeDefaultLog(cmnLogMask newLoD=0x33)
        ResumeDefaultLog()
        """
        return _cisstCommonPython.cmnLogger_ResumeDefaultLog(newLoD)

    ResumeDefaultLog = staticmethod(ResumeDefaultLog)

    def SetMaskDefaultLog(newLoD=0x33):
        """
        SetMaskDefaultLog(cmnLogMask newLoD=0x33)
        SetMaskDefaultLog()
        """
        return _cisstCommonPython.cmnLogger_SetMaskDefaultLog(newLoD)

    SetMaskDefaultLog = staticmethod(SetMaskDefaultLog)

    def AddChannel(outputStream, mask=0xFF):
        """
        AddChannel(ostream outputStream, cmnLogMask mask=0xFF)
        AddChannel(ostream outputStream)
        """
        return _cisstCommonPython.cmnLogger_AddChannel(outputStream, mask)

    AddChannel = staticmethod(AddChannel)

    def AddChannelToStdOut(mask=0x33):
        """
        AddChannelToStdOut(cmnLogMask mask=0x33)
        AddChannelToStdOut()
        """
        return _cisstCommonPython.cmnLogger_AddChannelToStdOut(mask)

    AddChannelToStdOut = staticmethod(AddChannelToStdOut)

    def AddChannelToStdErr(mask=0x33):
        """
        AddChannelToStdErr(cmnLogMask mask=0x33)
        AddChannelToStdErr()
        """
        return _cisstCommonPython.cmnLogger_AddChannelToStdErr(mask)

    AddChannelToStdErr = staticmethod(AddChannelToStdErr)

    def RemoveChannel(outputStream):
        """RemoveChannel(ostream outputStream)"""
        return _cisstCommonPython.cmnLogger_RemoveChannel(outputStream)

    RemoveChannel = staticmethod(RemoveChannel)

    def ExtractFileName(file):
        """ExtractFileName(char const * file) -> char const *"""
        return _cisstCommonPython.cmnLogger_ExtractFileName(file)

    ExtractFileName = staticmethod(ExtractFileName)

    def Kill():
        """Kill()"""
        return _cisstCommonPython.cmnLogger_Kill()

    Kill = staticmethod(Kill)

    def SetDefaultLogFileName(defaultLogFileName):
        """SetDefaultLogFileName(std::string const & defaultLogFileName) -> bool"""
        return _cisstCommonPython.cmnLogger_SetDefaultLogFileName(defaultLogFileName)

    SetDefaultLogFileName = staticmethod(SetDefaultLogFileName)

    def GetDefaultLogFileName():
        """GetDefaultLogFileName() -> std::string"""
        return _cisstCommonPython.cmnLogger_GetDefaultLogFileName()

    GetDefaultLogFileName = staticmethod(GetDefaultLogFileName)

    def IsCreated():
        """IsCreated() -> bool"""
        return _cisstCommonPython.cmnLogger_IsCreated()

    IsCreated = staticmethod(IsCreated)
    __swig_destroy__ = _cisstCommonPython.delete_cmnLogger
    __del__ = lambda self: None
cmnLogger_swigregister = _cisstCommonPython.cmnLogger_swigregister
cmnLogger_swigregister(cmnLogger)

def cmnLogger_Instance():
    """cmnLogger_Instance() -> cmnLogger"""
    return _cisstCommonPython.cmnLogger_Instance()

def cmnLogger_SetMask(mask):
    """cmnLogger_SetMask(cmnLogMask mask)"""
    return _cisstCommonPython.cmnLogger_SetMask(mask)

def cmnLogger_GetMask():
    """cmnLogger_GetMask() -> cmnLogMask"""
    return _cisstCommonPython.cmnLogger_GetMask()

def cmnLogger_SetMaskFunction(mask):
    """cmnLogger_SetMaskFunction(cmnLogMask mask)"""
    return _cisstCommonPython.cmnLogger_SetMaskFunction(mask)

def cmnLogger_GetMaskFunction():
    """cmnLogger_GetMaskFunction() -> cmnLogMask"""
    return _cisstCommonPython.cmnLogger_GetMaskFunction()

def cmnLogger_SetMaskClass(className, mask):
    """cmnLogger_SetMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnLogger_SetMaskClass(className, mask)

def cmnLogger_SetMaskClassAll(mask):
    """cmnLogger_SetMaskClassAll(cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnLogger_SetMaskClassAll(mask)

def cmnLogger_SetMaskClassMatching(stringToMatch, mask):
    """cmnLogger_SetMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnLogger_SetMaskClassMatching(stringToMatch, mask)

def cmnLogger_GetMultiplexer():
    """cmnLogger_GetMultiplexer() -> cmnLODMultiplexerStreambufChar"""
    return _cisstCommonPython.cmnLogger_GetMultiplexer()

def cmnLogger_HaltDefaultLog():
    """cmnLogger_HaltDefaultLog()"""
    return _cisstCommonPython.cmnLogger_HaltDefaultLog()

def cmnLogger_ResumeDefaultLog(newLoD=0x33):
    """
    ResumeDefaultLog(cmnLogMask newLoD=0x33)
    cmnLogger_ResumeDefaultLog()
    """
    return _cisstCommonPython.cmnLogger_ResumeDefaultLog(newLoD)

def cmnLogger_SetMaskDefaultLog(newLoD=0x33):
    """
    SetMaskDefaultLog(cmnLogMask newLoD=0x33)
    cmnLogger_SetMaskDefaultLog()
    """
    return _cisstCommonPython.cmnLogger_SetMaskDefaultLog(newLoD)

def cmnLogger_AddChannel(outputStream, mask=0xFF):
    """
    AddChannel(ostream outputStream, cmnLogMask mask=0xFF)
    cmnLogger_AddChannel(ostream outputStream)
    """
    return _cisstCommonPython.cmnLogger_AddChannel(outputStream, mask)

def cmnLogger_AddChannelToStdOut(mask=0x33):
    """
    AddChannelToStdOut(cmnLogMask mask=0x33)
    cmnLogger_AddChannelToStdOut()
    """
    return _cisstCommonPython.cmnLogger_AddChannelToStdOut(mask)

def cmnLogger_AddChannelToStdErr(mask=0x33):
    """
    AddChannelToStdErr(cmnLogMask mask=0x33)
    cmnLogger_AddChannelToStdErr()
    """
    return _cisstCommonPython.cmnLogger_AddChannelToStdErr(mask)

def cmnLogger_RemoveChannel(outputStream):
    """cmnLogger_RemoveChannel(ostream outputStream)"""
    return _cisstCommonPython.cmnLogger_RemoveChannel(outputStream)

def cmnLogger_ExtractFileName(file):
    """cmnLogger_ExtractFileName(char const * file) -> char const *"""
    return _cisstCommonPython.cmnLogger_ExtractFileName(file)

def cmnLogger_Kill():
    """cmnLogger_Kill()"""
    return _cisstCommonPython.cmnLogger_Kill()

def cmnLogger_SetDefaultLogFileName(defaultLogFileName):
    """cmnLogger_SetDefaultLogFileName(std::string const & defaultLogFileName) -> bool"""
    return _cisstCommonPython.cmnLogger_SetDefaultLogFileName(defaultLogFileName)

def cmnLogger_GetDefaultLogFileName():
    """cmnLogger_GetDefaultLogFileName() -> std::string"""
    return _cisstCommonPython.cmnLogger_GetDefaultLogFileName()

def cmnLogger_IsCreated():
    """cmnLogger_IsCreated() -> bool"""
    return _cisstCommonPython.cmnLogger_IsCreated()

class cmnPath(cmnGenericObject):
    """Proxy of C++ cmnPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnPath_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstCommonPython.cmnPath_InitialLoD

    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnPath_ClassServices()

    ClassServices = staticmethod(ClassServices)
    HEAD = _cisstCommonPython.cmnPath_HEAD
    TAIL = _cisstCommonPython.cmnPath_TAIL
    READ = _cisstCommonPython.cmnPath_READ
    WRITE = _cisstCommonPython.cmnPath_WRITE
    EXECUTE = _cisstCommonPython.cmnPath_EXECUTE
    EXIST = _cisstCommonPython.cmnPath_EXIST

    def __init__(self, *args):
        """
        __init__(cmnPath self) -> cmnPath
        __init__(cmnPath self, std::string const & path) -> cmnPath
        """
        this = _cisstCommonPython.new_cmnPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnPath
    __del__ = lambda self: None

    def Set(self, path):
        """Set(cmnPath self, std::string const & path)"""
        return _cisstCommonPython.cmnPath_Set(self, path)


    def Add(self, *args):
        """
        Add(cmnPath self, std::string const & path, bool head)
        Add(cmnPath self, std::string const & path)
        """
        return _cisstCommonPython.cmnPath_Add(self, *args)


    def AddFromEnvironment(self, *args):
        """
        AddFromEnvironment(cmnPath self, std::string const & variableName, bool head) -> bool
        AddFromEnvironment(cmnPath self, std::string const & variableName) -> bool
        """
        return _cisstCommonPython.cmnPath_AddFromEnvironment(self, *args)


    def AddRelativeToCisstRoot(self, *args):
        """
        AddRelativeToCisstRoot(cmnPath self, std::string const & relativePath, bool head) -> bool
        AddRelativeToCisstRoot(cmnPath self, std::string const & relativePath) -> bool
        """
        return _cisstCommonPython.cmnPath_AddRelativeToCisstRoot(self, *args)


    def AddRelativeToCisstShare(self, *args):
        """
        AddRelativeToCisstShare(cmnPath self, std::string const & relativePath, bool head) -> bool
        AddRelativeToCisstShare(cmnPath self, std::string const & relativePath) -> bool
        """
        return _cisstCommonPython.cmnPath_AddRelativeToCisstShare(self, *args)


    def Find(self, *args):
        """
        Find(cmnPath self, std::string const & filename, short mode) -> std::string
        Find(cmnPath self, std::string const & filename) -> std::string
        """
        return _cisstCommonPython.cmnPath_Find(self, *args)


    def FindWithSubdirectory(self, *args):
        """
        FindWithSubdirectory(cmnPath self, std::string const & filename, std::string const & subdirectory, short mode) -> std::string
        FindWithSubdirectory(cmnPath self, std::string const & filename, std::string const & subdirectory) -> std::string
        """
        return _cisstCommonPython.cmnPath_FindWithSubdirectory(self, *args)


    def Remove(self, directory):
        """Remove(cmnPath self, std::string const & directory) -> bool"""
        return _cisstCommonPython.cmnPath_Remove(self, directory)


    def Has(self, directory):
        """Has(cmnPath self, std::string const & directory) -> bool"""
        return _cisstCommonPython.cmnPath_Has(self, directory)


    def DirectorySeparator():
        """DirectorySeparator() -> std::string const &"""
        return _cisstCommonPython.cmnPath_DirectorySeparator()

    DirectorySeparator = staticmethod(DirectorySeparator)

    def GetWorkingDirectory():
        """GetWorkingDirectory() -> std::string"""
        return _cisstCommonPython.cmnPath_GetWorkingDirectory()

    GetWorkingDirectory = staticmethod(GetWorkingDirectory)

    def GetCisstRoot(result):
        """GetCisstRoot(std::string & result) -> bool"""
        return _cisstCommonPython.cmnPath_GetCisstRoot(result)

    GetCisstRoot = staticmethod(GetCisstRoot)

    def GetCisstShare(result):
        """GetCisstShare(std::string & result) -> bool"""
        return _cisstCommonPython.cmnPath_GetCisstShare(result)

    GetCisstShare = staticmethod(GetCisstShare)

    def Exists(*args):
        """
        Exists(std::string const & fullPath, short more) -> bool
        Exists(std::string const & fullPath) -> bool
        """
        return _cisstCommonPython.cmnPath_Exists(*args)

    Exists = staticmethod(Exists)

    def DeleteFile(fullPath):
        """DeleteFile(std::string const & fullPath) -> bool"""
        return _cisstCommonPython.cmnPath_DeleteFile(fullPath)

    DeleteFile = staticmethod(DeleteFile)

    def SharedLibrary(name):
        """SharedLibrary(std::string const & name) -> std::string"""
        return _cisstCommonPython.cmnPath_SharedLibrary(name)

    SharedLibrary = staticmethod(SharedLibrary)

    def Executable(name):
        """Executable(std::string const & name) -> std::string"""
        return _cisstCommonPython.cmnPath_Executable(name)

    Executable = staticmethod(Executable)
cmnPath_swigregister = _cisstCommonPython.cmnPath_swigregister
cmnPath_swigregister(cmnPath)

def cmnPath_ClassServices():
    """cmnPath_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnPath_ClassServices()

def cmnPath_DirectorySeparator():
    """cmnPath_DirectorySeparator() -> std::string const &"""
    return _cisstCommonPython.cmnPath_DirectorySeparator()

def cmnPath_GetWorkingDirectory():
    """cmnPath_GetWorkingDirectory() -> std::string"""
    return _cisstCommonPython.cmnPath_GetWorkingDirectory()

def cmnPath_GetCisstRoot(result):
    """cmnPath_GetCisstRoot(std::string & result) -> bool"""
    return _cisstCommonPython.cmnPath_GetCisstRoot(result)

def cmnPath_GetCisstShare(result):
    """cmnPath_GetCisstShare(std::string & result) -> bool"""
    return _cisstCommonPython.cmnPath_GetCisstShare(result)

def cmnPath_Exists(*args):
    """
    Exists(std::string const & fullPath, short more) -> bool
    cmnPath_Exists(std::string const & fullPath) -> bool
    """
    return _cisstCommonPython.cmnPath_Exists(*args)

def cmnPath_DeleteFile(fullPath):
    """cmnPath_DeleteFile(std::string const & fullPath) -> bool"""
    return _cisstCommonPython.cmnPath_DeleteFile(fullPath)

def cmnPath_SharedLibrary(name):
    """cmnPath_SharedLibrary(std::string const & name) -> std::string"""
    return _cisstCommonPython.cmnPath_SharedLibrary(name)

def cmnPath_Executable(name):
    """cmnPath_Executable(std::string const & name) -> std::string"""
    return _cisstCommonPython.cmnPath_Executable(name)

class cmnTypeTraitsDouble(object):
    """Proxy of C++ cmnTypeTraits<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Tolerance():
        """Tolerance() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_Tolerance()

    Tolerance = staticmethod(Tolerance)

    def SetTolerance(tolerance):
        """SetTolerance(cmnTypeTraits< double >::Type tolerance)"""
        return _cisstCommonPython.cmnTypeTraitsDouble_SetTolerance(tolerance)

    SetTolerance = staticmethod(SetTolerance)

    def TypeName():
        """TypeName() -> std::string"""
        return _cisstCommonPython.cmnTypeTraitsDouble_TypeName()

    TypeName = staticmethod(TypeName)

    def PlusInfinityOrMax():
        """PlusInfinityOrMax() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinityOrMax()

    PlusInfinityOrMax = staticmethod(PlusInfinityOrMax)

    def MinusInfinityOrMin():
        """MinusInfinityOrMin() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinityOrMin()

    MinusInfinityOrMin = staticmethod(MinusInfinityOrMin)

    def MaxPositiveValue():
        """MaxPositiveValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MaxPositiveValue()

    MaxPositiveValue = staticmethod(MaxPositiveValue)

    def MinPositiveValue():
        """MinPositiveValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinPositiveValue()

    MinPositiveValue = staticmethod(MinPositiveValue)

    def MaxNegativeValue():
        """MaxNegativeValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MaxNegativeValue()

    MaxNegativeValue = staticmethod(MaxNegativeValue)

    def MinNegativeValue():
        """MinNegativeValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinNegativeValue()

    MinNegativeValue = staticmethod(MinNegativeValue)

    def PlusInfinity():
        """PlusInfinity() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinity()

    PlusInfinity = staticmethod(PlusInfinity)

    def MinusInfinity():
        """MinusInfinity() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinity()

    MinusInfinity = staticmethod(MinusInfinity)

    def HasSign():
        """HasSign() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_HasSign()

    HasSign = staticmethod(HasSign)

    def HasInfinity():
        """HasInfinity() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_HasInfinity()

    HasInfinity = staticmethod(HasInfinity)

    def IsFinite(value):
        """IsFinite(cmnTypeTraits< double >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_IsFinite(value)

    IsFinite = staticmethod(IsFinite)

    def NaN():
        """NaN() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_NaN()

    NaN = staticmethod(NaN)

    def IsNaN(value):
        """IsNaN(cmnTypeTraits< double >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_IsNaN(value)

    IsNaN = staticmethod(IsNaN)

    def HasNaN():
        """HasNaN() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_HasNaN()

    HasNaN = staticmethod(HasNaN)

    def __init__(self):
        """__init__(cmnTypeTraits<(double)> self) -> cmnTypeTraitsDouble"""
        this = _cisstCommonPython.new_cmnTypeTraitsDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnTypeTraitsDouble
    __del__ = lambda self: None
cmnTypeTraitsDouble_swigregister = _cisstCommonPython.cmnTypeTraitsDouble_swigregister
cmnTypeTraitsDouble_swigregister(cmnTypeTraitsDouble)

def cmnTypeTraitsDouble_Tolerance():
    """cmnTypeTraitsDouble_Tolerance() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_Tolerance()

def cmnTypeTraitsDouble_SetTolerance(tolerance):
    """cmnTypeTraitsDouble_SetTolerance(cmnTypeTraits< double >::Type tolerance)"""
    return _cisstCommonPython.cmnTypeTraitsDouble_SetTolerance(tolerance)

def cmnTypeTraitsDouble_TypeName():
    """cmnTypeTraitsDouble_TypeName() -> std::string"""
    return _cisstCommonPython.cmnTypeTraitsDouble_TypeName()

def cmnTypeTraitsDouble_PlusInfinityOrMax():
    """cmnTypeTraitsDouble_PlusInfinityOrMax() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinityOrMax()

def cmnTypeTraitsDouble_MinusInfinityOrMin():
    """cmnTypeTraitsDouble_MinusInfinityOrMin() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinityOrMin()

def cmnTypeTraitsDouble_MaxPositiveValue():
    """cmnTypeTraitsDouble_MaxPositiveValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MaxPositiveValue()

def cmnTypeTraitsDouble_MinPositiveValue():
    """cmnTypeTraitsDouble_MinPositiveValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinPositiveValue()

def cmnTypeTraitsDouble_MaxNegativeValue():
    """cmnTypeTraitsDouble_MaxNegativeValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MaxNegativeValue()

def cmnTypeTraitsDouble_MinNegativeValue():
    """cmnTypeTraitsDouble_MinNegativeValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinNegativeValue()

def cmnTypeTraitsDouble_PlusInfinity():
    """cmnTypeTraitsDouble_PlusInfinity() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinity()

def cmnTypeTraitsDouble_MinusInfinity():
    """cmnTypeTraitsDouble_MinusInfinity() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinity()

def cmnTypeTraitsDouble_HasSign():
    """cmnTypeTraitsDouble_HasSign() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_HasSign()

def cmnTypeTraitsDouble_HasInfinity():
    """cmnTypeTraitsDouble_HasInfinity() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_HasInfinity()

def cmnTypeTraitsDouble_IsFinite(value):
    """cmnTypeTraitsDouble_IsFinite(cmnTypeTraits< double >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_IsFinite(value)

def cmnTypeTraitsDouble_NaN():
    """cmnTypeTraitsDouble_NaN() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_NaN()

def cmnTypeTraitsDouble_IsNaN(value):
    """cmnTypeTraitsDouble_IsNaN(cmnTypeTraits< double >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_IsNaN(value)

def cmnTypeTraitsDouble_HasNaN():
    """cmnTypeTraitsDouble_HasNaN() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_HasNaN()
cmnTypeTraitsDouble.DefaultTolerance = _cisstCommonPython.cvar.cmnTypeTraitsDouble_DefaultTolerance

class cmnTypeTraitsInt(object):
    """Proxy of C++ cmnTypeTraits<(int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Tolerance():
        """Tolerance() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_Tolerance()

    Tolerance = staticmethod(Tolerance)

    def SetTolerance(tolerance):
        """SetTolerance(cmnTypeTraits< int >::Type tolerance)"""
        return _cisstCommonPython.cmnTypeTraitsInt_SetTolerance(tolerance)

    SetTolerance = staticmethod(SetTolerance)

    def TypeName():
        """TypeName() -> std::string"""
        return _cisstCommonPython.cmnTypeTraitsInt_TypeName()

    TypeName = staticmethod(TypeName)

    def PlusInfinityOrMax():
        """PlusInfinityOrMax() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinityOrMax()

    PlusInfinityOrMax = staticmethod(PlusInfinityOrMax)

    def MinusInfinityOrMin():
        """MinusInfinityOrMin() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinityOrMin()

    MinusInfinityOrMin = staticmethod(MinusInfinityOrMin)

    def MaxPositiveValue():
        """MaxPositiveValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MaxPositiveValue()

    MaxPositiveValue = staticmethod(MaxPositiveValue)

    def MinPositiveValue():
        """MinPositiveValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinPositiveValue()

    MinPositiveValue = staticmethod(MinPositiveValue)

    def MaxNegativeValue():
        """MaxNegativeValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MaxNegativeValue()

    MaxNegativeValue = staticmethod(MaxNegativeValue)

    def MinNegativeValue():
        """MinNegativeValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinNegativeValue()

    MinNegativeValue = staticmethod(MinNegativeValue)

    def PlusInfinity():
        """PlusInfinity() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinity()

    PlusInfinity = staticmethod(PlusInfinity)

    def MinusInfinity():
        """MinusInfinity() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinity()

    MinusInfinity = staticmethod(MinusInfinity)

    def HasSign():
        """HasSign() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_HasSign()

    HasSign = staticmethod(HasSign)

    def HasInfinity():
        """HasInfinity() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_HasInfinity()

    HasInfinity = staticmethod(HasInfinity)

    def IsFinite(value):
        """IsFinite(cmnTypeTraits< int >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_IsFinite(value)

    IsFinite = staticmethod(IsFinite)

    def NaN():
        """NaN() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_NaN()

    NaN = staticmethod(NaN)

    def IsNaN(value):
        """IsNaN(cmnTypeTraits< int >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_IsNaN(value)

    IsNaN = staticmethod(IsNaN)

    def HasNaN():
        """HasNaN() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_HasNaN()

    HasNaN = staticmethod(HasNaN)

    def __init__(self):
        """__init__(cmnTypeTraits<(int)> self) -> cmnTypeTraitsInt"""
        this = _cisstCommonPython.new_cmnTypeTraitsInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cisstCommonPython.delete_cmnTypeTraitsInt
    __del__ = lambda self: None
cmnTypeTraitsInt_swigregister = _cisstCommonPython.cmnTypeTraitsInt_swigregister
cmnTypeTraitsInt_swigregister(cmnTypeTraitsInt)

def cmnTypeTraitsInt_Tolerance():
    """cmnTypeTraitsInt_Tolerance() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_Tolerance()

def cmnTypeTraitsInt_SetTolerance(tolerance):
    """cmnTypeTraitsInt_SetTolerance(cmnTypeTraits< int >::Type tolerance)"""
    return _cisstCommonPython.cmnTypeTraitsInt_SetTolerance(tolerance)

def cmnTypeTraitsInt_TypeName():
    """cmnTypeTraitsInt_TypeName() -> std::string"""
    return _cisstCommonPython.cmnTypeTraitsInt_TypeName()

def cmnTypeTraitsInt_PlusInfinityOrMax():
    """cmnTypeTraitsInt_PlusInfinityOrMax() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinityOrMax()

def cmnTypeTraitsInt_MinusInfinityOrMin():
    """cmnTypeTraitsInt_MinusInfinityOrMin() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinityOrMin()

def cmnTypeTraitsInt_MaxPositiveValue():
    """cmnTypeTraitsInt_MaxPositiveValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MaxPositiveValue()

def cmnTypeTraitsInt_MinPositiveValue():
    """cmnTypeTraitsInt_MinPositiveValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinPositiveValue()

def cmnTypeTraitsInt_MaxNegativeValue():
    """cmnTypeTraitsInt_MaxNegativeValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MaxNegativeValue()

def cmnTypeTraitsInt_MinNegativeValue():
    """cmnTypeTraitsInt_MinNegativeValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinNegativeValue()

def cmnTypeTraitsInt_PlusInfinity():
    """cmnTypeTraitsInt_PlusInfinity() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinity()

def cmnTypeTraitsInt_MinusInfinity():
    """cmnTypeTraitsInt_MinusInfinity() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinity()

def cmnTypeTraitsInt_HasSign():
    """cmnTypeTraitsInt_HasSign() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_HasSign()

def cmnTypeTraitsInt_HasInfinity():
    """cmnTypeTraitsInt_HasInfinity() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_HasInfinity()

def cmnTypeTraitsInt_IsFinite(value):
    """cmnTypeTraitsInt_IsFinite(cmnTypeTraits< int >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_IsFinite(value)

def cmnTypeTraitsInt_NaN():
    """cmnTypeTraitsInt_NaN() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_NaN()

def cmnTypeTraitsInt_IsNaN(value):
    """cmnTypeTraitsInt_IsNaN(cmnTypeTraits< int >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_IsNaN(value)

def cmnTypeTraitsInt_HasNaN():
    """cmnTypeTraitsInt_HasNaN() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_HasNaN()
cmnTypeTraitsInt.DefaultTolerance = _cisstCommonPython.cvar.cmnTypeTraitsInt_DefaultTolerance



